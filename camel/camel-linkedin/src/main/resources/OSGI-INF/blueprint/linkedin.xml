<?xml version="1.0"?>
<!--

     Copyright 2005-2018 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xsi:schemaLocation="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.0.0.xsd
             http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

    <!-- OSGi blueprint property placeholder -->
    <cm:property-placeholder id="placeholder" persistent-id="org.jboss.fuse.quickstarts.camel.linkedin">
        <cm:default-properties>
            <cm:property name="redirectUri" value="https://localhost"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <!-- LinkedIn component -->
    <bean id="linkedin" class="org.apache.camel.component.linkedin.LinkedInComponent">
        <property name="configuration">
            <bean class="org.apache.camel.component.linkedin.LinkedInConfiguration">
                <property name="userName" value="${userName}"/>
                <property name="userPassword" value="${userPassword}"/>
                <property name="clientId" value="${clientId}"/>
                <property name="clientSecret" value="${clientSecret}"/>
                <property name="redirectUri" value="${redirectUri}"/>
                <property name="scopes">
                    <array value-type="org.apache.camel.component.linkedin.api.OAuthScope">
                        <value>R_BASICPROFILE</value>
                    </array>
                </property>
            </bean>
        </property>
    </bean>

    <!--
      The namespace for the camelContext element in Blueprint is 'http://camel.apache.org/schema/blueprint'. Additionally,
      we can also define namespace prefixes we want to use them in the XPath expressions in our CBR.

      While it is not required to assign id's to the <camelContext/> and <route/> elements, it is a good idea
      to set those for runtime management purposes (logging, JMX MBeans, ...)
    -->
    <camelContext xmlns="http://camel.apache.org/schema/blueprint" id="linkedin-example-context">

        <!--
          When this route is started, it will automatically create the work/linkedin/output directory,
          where it will generate files with names of user's companies every 15 minutes.

          The <log/> elements are used to add human-friendly business logging statements. They make it easier to see what the
          route is doing.

          The <from/> element is the LinkedIn consumer endpoint, and the <to/> element is the file producer endpoint.
        -->
        <route id="linkedin-route">

            <from uri="linkedin://search/searchCompanies?fields=:(companies:(name,twitter-id,website-url))&amp;keywords=Red%20Hat&amp;consumer.timeUnit=SECONDS&amp;consumer.delay=60&amp;consumer.initialDelay=15" />
            <log message="Poll received ${body.companies.companyList.size} companies for search term 'Red Hat'" />

            <!-- Count of number of messages to aggregate later -->
            <setHeader headerName="completionSize">
                <simple>${body.companies.companyList.size}</simple>
            </setHeader>

            <!-- Split companyList to get individual companies as Company objects -->
            <split>
                <simple>${body.companies.companyList}</simple>
                <!-- send to aggregator route to write to file -->
                <to uri="direct:companiesFile" />
            </split>

        </route>

        <route id="linkedin-file-route">

            <from uri="direct:companiesFile" />

            <!-- Get Companies's name, twitter id and website url -->
            <setBody>
                <simple>${body.name}, ${body.twitterId}, ${body.websiteUrl}\n</simple>
            </setBody>

            <!-- Aggregate company lines and write to companies.txt -->
            <aggregate strategyRef="aggregatorStrategy">
                <correlationExpression>
                    <constant>true</constant>
                </correlationExpression>
                <completionSize>
                    <simple>header.completionSize</simple>
                </completionSize>
                <log message="Writing companies to companies.txt" />
                <to uri="file:work/linkedin/output?fileName=companies.txt" />
                <log message="Done downloading companies for search term 'Red Hat'" />
            </aggregate>

        </route>
    </camelContext>

    <bean id="aggregatorStrategy" class="org.jboss.fuse.quickstarts.processor.BodyInAggregatingStrategy"/>

</blueprint>
