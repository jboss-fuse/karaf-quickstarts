<?xml version="1.0"?>
<!--

     Copyright 2005-2018 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!--
        This Blueprint XML shows the _deployment_ method for connection factory configuration.
        With this method, it is not required to use pax-jms bundles at all. Instead both broker-specific
        and generic connection factories are declared as Blueprint beans.
        We need:
         - artemis-core-client and artemis-jms-client features
         - mvn:org.apache.commons/commons-pool2/2.5.0 bundle
         - mvn:org.messaginghub/pooled-jms/0.3.0 bundle
        Optionally, "jms" Karaf feature gives us jms:* commands to list and use connection factories from shell

        This Blueprint XML can be directly dropped to ${karaf.home}/deploy or archived in typical /OSGI-INF/blueprint
        directory and installed as normal bundle.

        Finally, this set of beans reflects the _canonical_ code example from
        org.jboss.fuse.quickstarts.persistence.standalone.StandaloneXAArtemisAccessTest.manualXAJMSAccess()
    -->

    <!--
        Broker-specific, non-pooling, non-enlisting javax.jms.XAConnectionFactory
    -->
    <bean id="artemis" class="org.apache.activemq.artemis.jms.client.ActiveMQXAConnectionFactory">
        <argument value="tcp://localhost:61616" />
        <property name="callTimeout" value="2000" />
        <property name="initialConnectAttempts" value="3" />
    </bean>

    <!--
        Fuse exports this service from fuse-pax-transx-tm-narayana bundle
    -->
    <reference id="tm" interface="javax.transaction.TransactionManager" />

    <!--
        Non broker-specific, generic, pooling, enlisting javax.jms.ConnectionFactory
    -->
    <bean id="pool" class="org.messaginghub.pooled.jms.JmsPoolXAConnectionFactory">
        <property name="connectionFactory" ref="artemis" />
        <property name="transactionManager" ref="tm" />
        <property name="maxConnections" value="10" />
        <property name="idleTimeout" value="10000" />
    </bean>

    <!--
        Expose connection factory to use by application code (like Camel, Spring, ...)
    -->
    <service interface="javax.jms.ConnectionFactory" ref="pool">
        <service-properties>
            <!-- Giving connection factory a name using one of these properties makes identification easier in jms:connectionfactories: -->
            <entry key="osgi.jndi.service.name" value="jms/artemis" />
            <!--<entry key="name" value="jms/artemis" />-->
            <!-- Without any of the above, name will fallback to "service.id" -->
        </service-properties>
    </service>

</blueprint>
